plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow"
    id "application"
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut.configuration:micronaut-picocli"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "info.picocli:picocli"
    implementation "io.micronaut.configuration:micronaut-picocli"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"

    implementation group: 'org.shredzone.acme4j', name: 'acme4j-client', version: '2.6'
    implementation group: 'org.shredzone.acme4j', name: 'acme4j-utils', version: '2.6'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "org.testcontainers:spock:1.13.0"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.5.0"
}

test.classpath += configurations.developmentOnly

mainClassName = "io.micronaut.acme.cli.AcmeCliCommand"

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

shadowJar {
    archiveBaseName = "micronaut-$project.name"
}

shadowDistZip {
    archiveBaseName = "micronaut-$project.name"
}

distributions {
    main {
        distributionBaseName = "micronaut-$project.name"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId( "micronaut-" + project.name )
            from components.java
            artifact shadowDistZip
        }
    }
}